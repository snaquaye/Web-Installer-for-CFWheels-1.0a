<cfcomponent displayname="Configuration" extends="Controller" output="false">
	<!--- TODO: Add support for Railo --->
	<!--- Public methods --->
	
	<cffunction name="init">
		<!--- Filters --->
		
		<cfset filters(through="checkAppServer", except="checkAppServer")>
		<cfset filters(through="AppServerVersion", except="AppServerVersion")>
	</cffunction>
	
	<cffunction name="checkAppServer" 
	            hint="Checks if the application server is a ColdFusion server as only coldfusion server is supported at the moment">
		<cfif server.ColdFusion.productName NEQ "Coldfusion Server">
			<cfoutput>
				Sorry only 
				<b>
					Coldfusion Application Server
				</b>is supported at the moment.
			</cfoutput>
			<cfabort>
		</cfif>
	</cffunction>
	
	<cffunction name="AppServerVersion" hint="Checks the version of the application server">
		<!---Get the version of the application server--->
		
		<cfset loc.applicationServerVersion = #replace(server.ColdFusion.productversion, ",", ".", "all")#>
	
		<cfscript>
			//confirm if the version of the application server is 8 or greater
			if(loc.applicationServerVersion Lt 8)
			{
				writeOutput("Only versions of Coldfusion Server greater than version 7 is supported");
				abort;
			}
		</cfscript>
		
	</cffunction>
	
	<cffunction name="firstRun" hint="Do initial configuration of the application">
		<!--- Choose the view to render based on the variable passed from the URL --->
		
		<cfswitch expression="#params.step#">
			<!--- Displays the license agreement view --->
			<cfcase value="1">
				<!--- Confirms if the license text file exists --->
				<cfif fileExists(expandPath("license\license.txt"))>
					<cffile action="read" file="#expandPath("license\license.txt")#" variable="license">
					<cfset contentFor(license=license)>
				<cfelse>
					<cfset contentFor(license="Could not find the license file")>
				</cfif>
				<cfset renderPage(action="preinstall")>
			</cfcase>
			<!--- Render the datasource creation view --->
			<cfcase value="2">
				<cfset step = 2>				
				<cfset renderPage(action="install")>
			</cfcase>
			<!--- Renders the mail server configuration page --->
			<cfcase value="3">
				<cfset step = 3>
				<cfset renderPage(action="install")>
			</cfcase>
			<!--- Renders the site configuration page --->
			<cfcase value="4">
				<cfset step = 4>
				<cfset admin = model("user").new()>
				<cfset renderPage(action="install")>
			</cfcase>
			
			<!--- No value was passed into the step variables --->
			<cfdefaultcase>
				<cfoutput>
					Web Installer can not determine what view to render. Please pass the 
					<b>
						STEP
					</b>value to the URL.
				</cfoutput>
				<cfabort>
			</cfdefaultcase>
		</cfswitch>
		
	</cffunction>
	
	<cffunction name="abortInstallation">
		<cfoutput>Installation aborted by user.</cfoutput>
		<cfabort>
	</cffunction>
	
	<cffunction name="configure" hint="Build up the configuration file">
		<cfset loc.errorMessageObject = []>
	
		<cfscript>
			if(isEmpty(argumentCollection=params))
			{
			}
			if(server.ColdFusion.productName EQ "Coldfusion Server")
			{
			}
		</cfscript>
		
	</cffunction>
	
	<!--- Private methods --->
	
	<cffunction name="isEmpty" access="private" hint="">
		<cfargument name="field" required="true" type="struct"/>
	
		<cfdump var="#arguments.field#" abort="true">
		<cfif argument.field is "">
			<cfreturn true>
		</cfif>
	</cffunction>
	
	<cffunction name="addCFDatasource" access="private" hint="Create the datasource in coldfusion">
		<cfargument name="adminusername" required="false" default="admin" type="string"
		            hint="The username for coldfusion administrator"/>
		<cfargument name="adminpassword" required="true" type="string" 
		            hint="Password for accessing the server administrator"/>
		<cfargument name="datasource" required="true" type="string" hint="Datasource to create"/>
		<cfargument name="dbName" required="true" type="string" hint="Name of database in the DB Server"/>
		<cfargument name="host" required="true" type="string" hint="Host name for the DB server"/>
		<cfargument name="dbType" required="true" type="string" hint="Database type"/>
		<cfargument name="username" required="true" type="string" 
		            hint="Username for accessing the database"/>
		<cfargument name="password" required="true" type="string" 
		            hint="Password for accessing the database"/>
		<cfargument name="databasePort" required="false" type="numeric" 
		            hint="Database server port address"/>
	
		<cfscript>
			var loc = {};
			errorModelObject = [];//holds all errors generated by this function
			//Login to the coldfusion administrator
			var CFAdminAuthObj = createObject("component", "CFIDE.adminapi.administrator");
			loc.auth.result = CFAdminAuth.login(adminPassword="#arguments.adminpassword#", 
			                                    adminUserId="#arguments.adminusername#");
			//Confirms if the username and password supplied are correct
			if(loc.auth.result)
			{
				var dsObj = createObject("component", "CFIDE.adminapi.datasource");
			}
			else
			{
				error = "Invalid Coldfusion Administrator username or password";
				arrayAppend(errorModelObject, error);
				renderPage(action="firstRun");
			}
			//Checks if an instance of coldfusion datasource component is created
			if(isObject(dsObj))
			{
				try
				{
					dsObj.getDatasources(arguments.datasource);
				}
					//If it doesn't exist, it would throw an error
				catch(any exception)
				{
					loc.dsExists = false;
				}
			}
			if(dsExists)
			{
				error = "Datasource name already exists";
				arrayAppend(errorModelObject, error);
				renderPage(action="firstRun");
			}
			//creates a new struct and assign it values needed to create datasource
			dns = {};
			dns.name = arguments.datasource;
			dns.database = arguments.dbName;
			dns.username = arguments.username;
			dns.password = arguments.password;
		
			//Checks if the database port is not empty
			if(arguments.databasePort NEQ "")
			{
				dns.port = arguments.databasePort;
			}
		
			//checks the database type
			if(arguments.dbType EQ "MSSQL2005" or arguments.dbType EQ "MSSQL2008")
			{
				dsObj.setMSSQL(argumentCollection=dns);
			}
			if(arguments.dbType EQ "MySQL")
			{
				dsObj.setMySQL5(argumentCollection=dns);
			}
			//verify the just created datasource
			else
				loc.result.status = dsObj.verifyDsn(arguments.datasource);
			if(NOT loc.result.status)
			{
				dsObj.deleteDatasource(arguments.datasource);
				arrayAppend(errorModelObject, "Datasource verification failed. Check your setting");
				renderPage(action="firstRun");
			}
		</cfscript>
		
	</cffunction>
	
	<!---<cffunction name="addRailoDatasource" access="package" hint="Create the datasourc in railo">
	
	</cffunction>--->
</cfcomponent>